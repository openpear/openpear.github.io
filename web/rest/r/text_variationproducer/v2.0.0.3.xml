<?xml version="1.0" encoding="UTF-8" ?>
<r xmlns="http://pear.php.net/dtd/rest.release2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://pear.php.net/dtd/rest.release2 http://pear.php.net/dtd/rest.release2.xsd">
    <p xlink:href="/rest/p/text_variationproducer">Text_VariationProducer</p>
    <c>openpear.org</c>
    <v>0.0.3</v>
    <a>0.0.3</a>
    <mp>5.0.0</mp>
    <st>alpha</st>
    <l>New BSD Licence</l>
    <m>hnw</m>
    <s>Text_VariationProducerは、指定した全組み合わせの文字列を作り出すようなイテレータです。n重ループや分岐を書く代わりに、文字列の組み合わせパターンを簡単な文法で記述するだけで全部の組み合わせを順に得ることができます。

任意の文字列の組み合わせを比較的簡潔に記述できます。また、Text_VariationProducerはSPLのイテレータを実装しているため、foreach文で簡潔にループを記述できます。

他の特徴としては、必要になってから文字列を生成し、生成した文字列を即座に破棄する点が挙げられます。全ての組み合わせを一度に生成するよりもメモリ消費が抑えられ、組み合わせ数が多い場合（数十万から百万程度）でも現実的に動作します。

さらに、クラス定数で便利な文字列定義を提供しており、「1バイトから3バイトで表現される全てのUTF-8の1文字」などが簡単に利用できます。


* 用途

- デバッグ：検査用文字列を簡単に大量に作れて便利です。
- テスト：大量の文字列に対するテストを簡潔に記述できます。


*サンプル

次のような使い方ができます。

&gt;||
&lt;?php
require_once 'Text/VariationProducer.php';

$strings = new Text_VariationProducer('abc{01,23[xyz]}');
foreach ($strings as $string) {
  echo &quot;$string\n&quot;;
}
/*
Results:
abc01
abc23x
abc23y
abc23z
*/
||&lt;


&gt;||
&lt;?php
require_once 'Text/VariationProducer.php';

$strings = new Text_VariationProducer(Text_VariationProducer::UTF8);
$count = $false_count = 0;
foreach ($strings as $string) {
  $count++;
  if (!mb_check_encoding($string, &quot;UTF-8&quot;)) {
    $false_count++;
  }
}
echo &quot;not UTF-8: $false_count/$count\n&quot;;
/*
Results:
not UTF-8: 0/63488
*/
||&lt;


* コンストラクタ引数について

コンストラクタ引数で、どのような文字列を作るか指定できます。


:'通常の文字列':そのまま記述します。例：'abc'→文字列&quot;abc&quot;1種類
:'\123':バックスラッシュ+数字1〜3桁で、8進表記により1バイトを表現できます。例：'\0'→ヌル文字
:'\x20':バックスラッシュ+x+数字1〜2桁で、16進表記により1バイトを表現できます。
:'\n':バックスラッシュ+英字1文字で、PHPのダブルクォート内と同様のエスケープ文字が記述できます。
:'…\{…':Perlの文字列風に、バックスラッシュにより任意の1文字を表現できます。その文字が特殊文字として解釈されるのを防ぐことができます。これは以下の構文内でも同様です。
:'{…}':シェル風のブレース展開が記述できます。例：'{01,23,45}'→&quot;01&quot; &quot;23&quot; &quot;45&quot;の3種類
:'[…]':正規表現風に1バイトを記述できます。例：'[135]'→&quot;1&quot; &quot;3&quot; &quot;5&quot;の3種類／'[a-z]'→&quot;a&quot; &quot;b&quot; … &quot;z&quot;の26種類
:'[^…]':正規表現風な否定形式で1バイトを記述できます。例：'[^\x01-\xfe]'→&quot;\0&quot; &quot;\xff&quot;の2種類
:組み合わせ:上記の記法を自由に組み合わせることができます。例：'{ab,cd[3-4]}[PQ].dat'→&quot;abP.dat&quot; &quot;abQ.dat&quot; &quot;cd3P.dat&quot; &quot;cd3Q.dat&quot; &quot;cd4P.dat&quot; &quot;cd4Q.dat&quot;の6種類


* 制限・注意点

現時点では{…}のネストはできません。{…}の内側に[…]を書くことは可能です。

Text_VariationProducerでバックスラッシュを含む文字列を作るには「\\」という文字列をコンストラクタに渡す必要があるため、PHPの表現としては'\\\\'と書く必要があります。これは非常に読みにくいので、代わりに'\x5c'と記述することもできます。どちらがマシかは微妙だと思いますけど。


* クラス定数

コンストラクタ引数に渡す用途として、Text_VariationProducer::UTF8のようなクラス定数を利用できます。例えば下記のようなクラス定数が定義されています。

:UTF8 （1〜3バイトのUTF-8の1文字、サロゲート領域のU+D800〜U+DFFFを除くU+FFFFまで、63488種）:'{[\x00-\x7f],[\xc2-\xdf][\x80-\xbf],[\xe0][\xa0-\xbf][\x80-\xbf],[\xe1-\xec\xee\xef][\x80-\xbf][\x80-\xbf],\xed[\x80-\x9f][\x80-\xbf]}'

:SJIS_WIN （ASCII+1区〜120区のSJIS漢字+半角カナ、117+11280+63=11460種):'{[\x00-\x7e],[\x81-\x9f\xe0-\xfc][\x40-\x7e\x80-\xfc],[\xa1-\xdf]}'


* 履歴

- 0.1.2 (2009/05/02) クラス定数の定義を修正／別名を追加
- 0.1.1 (2009/04/30) UTF8などのクラス定数を追加
- 0.1.0 (2009/04/29) ベータリリース</s>
    <d>Text_VariationProducerは、指定した全組み合わせの文字列を作り出すようなイテレータです。n重ループや分岐を書く代わりに、文字列の組み合わせパターンを簡単な文法で記述するだけで全部の組み合わせを順に得ることができます。

任意の文字列の組み合わせを比較的簡潔に記述できます。また、Text_VariationProducerはSPLのイテレータを実装しているため、foreach文で簡潔にループを記述できます。

他の特徴としては、必要になってから文字列を生成し、生成した文字列を即座に破棄する点が挙げられます。全ての組み合わせを一度に生成するよりもメモリ消費が抑えられ、組み合わせ数が多い場合（数十万から百万程度）でも現実的に動作します。

さらに、クラス定数で便利な文字列定義を提供しており、「1バイトから3バイトで表現される全てのUTF-8の1文字」などが簡単に利用できます。


* 用途

- デバッグ：検査用文字列を簡単に大量に作れて便利です。
- テスト：大量の文字列に対するテストを簡潔に記述できます。


*サンプル

次のような使い方ができます。

&gt;||
&lt;?php
require_once 'Text/VariationProducer.php';

$strings = new Text_VariationProducer('abc{01,23[xyz]}');
foreach ($strings as $string) {
  echo &quot;$string\n&quot;;
}
/*
Results:
abc01
abc23x
abc23y
abc23z
*/
||&lt;


&gt;||
&lt;?php
require_once 'Text/VariationProducer.php';

$strings = new Text_VariationProducer(Text_VariationProducer::UTF8);
$count = $false_count = 0;
foreach ($strings as $string) {
  $count++;
  if (!mb_check_encoding($string, &quot;UTF-8&quot;)) {
    $false_count++;
  }
}
echo &quot;not UTF-8: $false_count/$count\n&quot;;
/*
Results:
not UTF-8: 0/63488
*/
||&lt;


* コンストラクタ引数について

コンストラクタ引数で、どのような文字列を作るか指定できます。


:'通常の文字列':そのまま記述します。例：'abc'→文字列&quot;abc&quot;1種類
:'\123':バックスラッシュ+数字1〜3桁で、8進表記により1バイトを表現できます。例：'\0'→ヌル文字
:'\x20':バックスラッシュ+x+数字1〜2桁で、16進表記により1バイトを表現できます。
:'\n':バックスラッシュ+英字1文字で、PHPのダブルクォート内と同様のエスケープ文字が記述できます。
:'…\{…':Perlの文字列風に、バックスラッシュにより任意の1文字を表現できます。その文字が特殊文字として解釈されるのを防ぐことができます。これは以下の構文内でも同様です。
:'{…}':シェル風のブレース展開が記述できます。例：'{01,23,45}'→&quot;01&quot; &quot;23&quot; &quot;45&quot;の3種類
:'[…]':正規表現風に1バイトを記述できます。例：'[135]'→&quot;1&quot; &quot;3&quot; &quot;5&quot;の3種類／'[a-z]'→&quot;a&quot; &quot;b&quot; … &quot;z&quot;の26種類
:'[^…]':正規表現風な否定形式で1バイトを記述できます。例：'[^\x01-\xfe]'→&quot;\0&quot; &quot;\xff&quot;の2種類
:組み合わせ:上記の記法を自由に組み合わせることができます。例：'{ab,cd[3-4]}[PQ].dat'→&quot;abP.dat&quot; &quot;abQ.dat&quot; &quot;cd3P.dat&quot; &quot;cd3Q.dat&quot; &quot;cd4P.dat&quot; &quot;cd4Q.dat&quot;の6種類


* 制限・注意点

現時点では{…}のネストはできません。{…}の内側に[…]を書くことは可能です。

Text_VariationProducerでバックスラッシュを含む文字列を作るには「\\」という文字列をコンストラクタに渡す必要があるため、PHPの表現としては'\\\\'と書く必要があります。これは非常に読みにくいので、代わりに'\x5c'と記述することもできます。どちらがマシかは微妙だと思いますけど。


* クラス定数

コンストラクタ引数に渡す用途として、Text_VariationProducer::UTF8のようなクラス定数を利用できます。例えば下記のようなクラス定数が定義されています。

:UTF8 （1〜3バイトのUTF-8の1文字、サロゲート領域のU+D800〜U+DFFFを除くU+FFFFまで、63488種）:'{[\x00-\x7f],[\xc2-\xdf][\x80-\xbf],[\xe0][\xa0-\xbf][\x80-\xbf],[\xe1-\xec\xee\xef][\x80-\xbf][\x80-\xbf],\xed[\x80-\x9f][\x80-\xbf]}'

:SJIS_WIN （ASCII+1区〜120区のSJIS漢字+半角カナ、117+11280+63=11460種):'{[\x00-\x7e],[\x81-\x9f\xe0-\xfc][\x40-\x7e\x80-\xfc],[\xa1-\xdf]}'


* 履歴

- 0.1.2 (2009/05/02) クラス定数の定義を修正／別名を追加
- 0.1.1 (2009/04/30) UTF8などのクラス定数を追加
- 0.1.0 (2009/04/29) ベータリリース</d>
    <da>2009-04-27 11:34:11</da>
    <n>------------------------------------------------------------------------
r768 | hnw | 2009-04-27 11:30:50 -0700 (Mon, 27 Apr 2009) | 1 line

PHP?\227?\129?\174?\230?\150?\135?\229?\173?\151?\229?\136?\151?\227?\129?\168?\227?\129?\175?\227?\131?\144?\227?\131?\131?\227?\130?\175?\227?\130?\185?\227?\131?\169?\227?\131?\131?\227?\130?\183?\227?\131?\165?\227?\129?\174?\232?\167?\163?\233?\135?\136?\227?\130?\146?\229?\164?\137?\227?\129?\136?\227?\128?\129?\230?\172?\161?\227?\129?\1741?\230?\150?\135?\229?\173?\151?\227?\129?\174?\230?\132?\143?\229?\145?\179?\227?\129?\168?\227?\129?\151?\227?\129?\159 / ?\229?\144?\166?\229?\174?\154?\230?\150?\135?\229?\173?\151?\227?\130?\175?\227?\131?\169?\227?\130?\185?\227?\129?\163?\227?\129?\189?\227?\129?\132?\227?\130?\130?\227?\129?\174?\227?\130?\146?\229?\174?\159?\232?\163?\133 / ?\227?\129?\157?\227?\129?\174?\228?\187?\150?\232?\135?\180?\229?\145?\189?\231?\154?\132?\227?\131?\144?\227?\130?\176?\228?\191?\174?\230?\173?\163
------------------------------------------------------------------------
r756 | hnw | 2009-04-26 18:58:09 -0700 (Sun, 26 Apr 2009) | 1 line

fixed typo: old class name
------------------------------------------------------------------------
r755 | hnw | 2009-04-26 18:40:05 -0700 (Sun, 26 Apr 2009) | 1 line

first version
------------------------------------------------------------------------</n>
    <f>4227</f>
    <g>http://openpear.org/get/Text_VariationProducer-0.0.3</g>
    <x xlink:href="package.0.0.3.xml"/>
</r>