<?xml version="1.0" encoding="UTF-8" ?>
<p xmlns="http://pear.php.net/dtd/rest.package" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://pear.php.net/dtd/rest.package    http://pear.php.net/dtd/rest.package.xsd">
<n>LazyFileIterator</n>
<c>openpear.org</c>
<ca xlink:href="/rest/c/Default">Default</ca>
<l>New BSD Licence</l>
<s>LazyFileIteratorは、ファイルの内容を1行づつ取得するようなイテレータです。

LazyFileIteratorはSplFileObjectと異なり、必要になってからファイルをオープンし、不要になるとファイルをクローズします。

SplFileObjectはオブジェクト生成のタイミングでファイルをオープンし、オブジェクトが存在する間はファイルもクローズしないため、大量のファイルに対して同数のイテレータを生成してしまうと、同数のファイルオープン数を消費してしまいます。LazyFileIteratorを利用すれば、この問題を回避することができます。

LazyFileIteratorは内部的にSplFileObjectを生成して利用しています。


* 機能

- 初めてのメソッド呼びだしのタイミングでSplFileObjectを生成し、ファイルをオープンします。
- ファイル終端まで読み込むと、SplFileObjectを解放し、ファイルをクローズします。
- 一旦ファイルがクローズされた後でrewind()するとSplFileObjectを再度生成し、ファイルを再度オープンします。
- 実ファイルが存在しないファイル（URLや標準入力など）をオープンする場合にはNoRewindIteratorを利用しますので、イテレータとして特に苦労せずに使えます。


* 動作例

catのように、引数のファイルを全て連結して表示するようなプログラムを示します。

AppendIteratorに、複数のLazyFileIteratorを与えています。SplFileObjectで同じことをすると、ファイルオープン数をファイル数と同数消費してしまいます。

&gt;||
&lt;?php
require_once('LazyFileIterator.php');

$inputs = new AppendIterator();

$files = $_SERVER['argv'];
array_shift($files); // remove filename of myself

if ($files === array()) {
  $files[] = 'php://stdin';
}
foreach($files as $filename) {
  $inputs-&gt;append(new LazyFileIterator($filename, 'r'));
}

foreach($inputs as $line) {
  print $line;
}
||&lt;</s>
<d>LazyFileIteratorは、ファイルの内容を1行づつ取得するようなイテレータです。

LazyFileIteratorはSplFileObjectと異なり、必要になってからファイルをオープンし、不要になるとファイルをクローズします。

SplFileObjectはオブジェクト生成のタイミングでファイルをオープンし、オブジェクトが存在する間はファイルもクローズしないため、大量のファイルに対して同数のイテレータを生成してしまうと、同数のファイルオープン数を消費してしまいます。LazyFileIteratorを利用すれば、この問題を回避することができます。

LazyFileIteratorは内部的にSplFileObjectを生成して利用しています。


* 機能

- 初めてのメソッド呼びだしのタイミングでSplFileObjectを生成し、ファイルをオープンします。
- ファイル終端まで読み込むと、SplFileObjectを解放し、ファイルをクローズします。
- 一旦ファイルがクローズされた後でrewind()するとSplFileObjectを再度生成し、ファイルを再度オープンします。
- 実ファイルが存在しないファイル（URLや標準入力など）をオープンする場合にはNoRewindIteratorを利用しますので、イテレータとして特に苦労せずに使えます。


* 動作例

catのように、引数のファイルを全て連結して表示するようなプログラムを示します。

AppendIteratorに、複数のLazyFileIteratorを与えています。SplFileObjectで同じことをすると、ファイルオープン数をファイル数と同数消費してしまいます。

&gt;||
&lt;?php
require_once('LazyFileIterator.php');

$inputs = new AppendIterator();

$files = $_SERVER['argv'];
array_shift($files); // remove filename of myself

if ($files === array()) {
  $files[] = 'php://stdin';
}
foreach($files as $filename) {
  $inputs-&gt;append(new LazyFileIterator($filename, 'r'));
}

foreach($inputs as $line) {
  print $line;
}
||&lt;</d>
<r xlink:href="/rest/r/lazyfileiterator" />
</p>